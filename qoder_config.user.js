// ==UserScript==
// @name         Qoder 注册助手1.2ob - 配置版
// @namespace    http://tampermonkey.net/
// @version      1.2
// @description  在Qoder注册页面提供注册助手面板，支持自动注册功能（配置版 - 支持域名配置和临时邮箱服务）
// @author       hj0185765
// @match        https://qoder.com/*
// @match        https://*.qoder.com/*
// @grant        GM_xmlhttpRequest
// @updateURL    https://raw.githubusercontent.com/hj01857655/Qoder/master/qoder_config.user.js
// @downloadURL  https://raw.githubusercontent.com/hj01857655/Qoder/master/qoder_config.user.js
// ==/UserScript==

(function(){"use strict";const SELECTORS={firstName:'input[id="basic_firstName"]',lastName:'input[id="basic_lastName"]',email:'input[id="basic_email"]',password:'input[id="basic_password"]',captcha:"#captcha-element",continueBtn:'button.ant-btn-primary, button[type="button"].ant-btn-primary',checkbox:'input[class="ant-checkbox-input"][type="checkbox"]',otpInputs:'.ant-otp-input, input[aria-label^="OTP Input"]',captchaCheckbox:"#aliyunCaptcha-checkbox-icon",captchaCheckedIcon:".aliyunCaptcha-checkbox-icon-checked",captchaBody:"#aliyunCaptcha-checkbox-body",captchaText:"#aliyunCaptcha-checkbox-text",errorAlert:".alert--cQdh1TE",verificationCode:".verificationCode--o_u9MiU"},CONFIG={password:{minLength:8,maxLength:20,defaultLength:12},tempEmail:{maxRetries:20,retryDelay:5e3,verificationTimeout:6e4},captcha:{maxRetries:3,timeout:8e3,mouseMoveDelay:15,clickDelay:4e3},ui:{maxLogs:100,toastDuration:3e3,panelZIndex:10002,buttonZIndex:10001}},STORAGE_KEYS={config:"qoder_config",accounts:"qoder_accounts"},RouteManager={paths:{signup:"/users/sign-up",signin:"/users/sign-in",home:"/",account:"/account/"},getCurrentPath(){return window.location.pathname},getCurrentUrl(){return window.location.href},isAtPath(path){return this.getCurrentPath()===path||this.getCurrentUrl().includes(path)},isSignupPage(){return this.isAtPath(this.paths.signup)},isSigninPage(){return this.isAtPath(this.paths.signin)},isHomePage(){return this.isAtPath(this.paths.home)},isAccountPage(){return this.isAtPath(this.paths.account)},isSigninOrHomePage(){return this.isSigninPage()||this.isHomePage()},navigateTo(path){window.location.href=path},navigateToSignup(){this.navigateTo(this.paths.signup)}},PageManager={pageTypes:{SIGNUP:"signup",SIGNIN:"signin",HOME:"home",ACCOUNT:"account",UNKNOWN:"unknown"},getCurrentPageType(){return RouteManager.isSignupPage()?this.pageTypes.SIGNUP:RouteManager.isSigninPage()?this.pageTypes.SIGNIN:RouteManager.isHomePage()?this.pageTypes.HOME:RouteManager.isAccountPage()?this.pageTypes.ACCOUNT:this.pageTypes.UNKNOWN},pageHandlers:{signup:()=>{Logger.info("在注册页面，开始注册助手..."),setTimeout(()=>{createFloatingButton(),autoCheckCheckbox()},2e3)},signin:()=>{Logger.info("在登录页面，添加注册助手入口..."),setTimeout(()=>{GoToRegisterButton()},1e3)},home:()=>{Logger.info("在首页，添加注册助手入口..."),setTimeout(()=>{GoToRegisterButton()},1e3)},account:()=>{Logger.info("在账户相关页面，隐藏注册助手按钮..."),hideRegisterButtons()},unknown:()=>{Logger.info("未知页面类型，跳过处理")}},handleCurrentPage(){const pageType=this.getCurrentPageType(),handler=this.pageHandlers[pageType];handler?handler():Logger.warning(`未找到页面类型 ${pageType} 的处理器`)},shouldShowRegisterPanel(){return RouteManager.isSignupPage()&&!RouteManager.isAccountPage()},shouldShowSigninButton(){return RouteManager.isSigninOrHomePage()&&!RouteManager.isAccountPage()}},Utils={debounce(func,wait){let timeout;return function(...args){const later=()=>{clearTimeout(timeout),func(...args)};clearTimeout(timeout),timeout=setTimeout(later,wait)}},throttle(func,limit){let inThrottle;return function(){const args=arguments,context=this;inThrottle||(func.apply(context,args),inThrottle=!0,setTimeout(()=>inThrottle=!1,limit))}},safeJsonParse(str,defaultValue=null){try{return JSON.parse(str)}catch(e){return console.warn("JSON解析失败:",e),defaultValue}},randomString(length=8){const chars="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789";let result="";for(let i=0;i<length;i++)result+=chars.charAt(Math.floor(Math.random()*chars.length));return result},waitForElement(selector,timeout=1e4){return new Promise((resolve,reject)=>{const element=document.querySelector(selector);if(element){resolve(element);return}const observer=new MutationObserver((mutations,obs)=>{const element=document.querySelector(selector);element&&(obs.disconnect(),resolve(element))});observer.observe(document.body,{childList:!0,subtree:!0}),setTimeout(()=>{observer.disconnect(),reject(new Error(`等待元素超时: ${selector}`))},timeout)})}};class PasswordGenerator{constructor(){this.minLength=CONFIG.password.minLength,this.maxLength=CONFIG.password.maxLength,this.charSets={lowercase:"abcdefghijklmnopqrstuvwxyz",uppercase:"ABCDEFGHIJKLMNOPQRSTUVWXYZ",numbers:"0123456789"}}generate(length=CONFIG.password.defaultLength){length=Math.max(this.minLength,Math.min(this.maxLength,length));let password="";const requiredChars=[];requiredChars.push(this.getRandomChar(this.charSets.lowercase)),requiredChars.push(this.getRandomChar(this.charSets.uppercase)),requiredChars.push(this.getRandomChar(this.charSets.numbers));const remainingLength=length-requiredChars.length,allChars=this.charSets.lowercase+this.charSets.uppercase+this.charSets.numbers;for(let i=0;i<remainingLength;i++)password+=this.getRandomChar(allChars);for(const char of requiredChars){const randomIndex=Math.floor(Math.random()*(password.length+1));password=password.slice(0,randomIndex)+char+password.slice(randomIndex)}return password}getRandomChar(charSet){return charSet.charAt(Math.floor(Math.random()*charSet.length))}validate(password){const errors=[];return password.length<this.minLength&&errors.push(`密码长度不能少于${this.minLength}个字符`),password.length>this.maxLength&&errors.push(`密码长度不能超过${this.maxLength}个字符`),/[a-z]/.test(password)||errors.push("密码必须包含至少一个小写字母"),/[A-Z]/.test(password)||errors.push("密码必须包含至少一个大写字母"),/\d/.test(password)||errors.push("密码必须包含至少一个数字"),{isValid:errors.length===0,errors}}}class ConfigManager{constructor(){this.config=this.loadConfig()}getDefaultConfig(){return{customDomains:[],autoFetchVerificationCode:!0,tempEmailConfig:{tempmail:"",epin:"",first_id:""}}}loadConfig(){const saved=localStorage.getItem(STORAGE_KEYS.config);if(saved){const parsed=Utils.safeJsonParse(saved);if(parsed)return{...this.getDefaultConfig(),...parsed}}return this.getDefaultConfig()}saveConfig(){localStorage.setItem(STORAGE_KEYS.config,JSON.stringify(this.config))}updateConfig(newConfig){this.config={...this.config,...newConfig},this.saveConfig()}getCustomDomains(){return this.config.customDomains||[]}isAutoFetchEnabled(){return this.config.autoFetchVerificationCode!==!1}getTempEmailConfig(){return this.config.tempEmailConfig||{}}saveAccount(accountInfo){try{const accounts=this.getAccounts(),accountId=Date.now().toString(),accountData={id:accountId,...accountInfo,createdAt:(new Date).toISOString(),status:"active"};return accounts.push(accountData),localStorage.setItem(STORAGE_KEYS.accounts,JSON.stringify(accounts)),Logger.success(`✅ 账号保存成功: ${accountInfo.email}`),accountId}catch(error){return Logger.error(`❌ 保存账号失败: ${error.message}`),null}}getAccounts(){try{const saved=localStorage.getItem(STORAGE_KEYS.accounts);return saved?Utils.safeJsonParse(saved)||[]:[]}catch(error){return Logger.error(`❌ 获取账号列表失败: ${error.message}`),[]}}deleteAccount(accountId){try{const accounts=this.getAccounts(),filteredAccounts=accounts.filter(account=>account.id!==accountId);return localStorage.setItem(STORAGE_KEYS.accounts,JSON.stringify(filteredAccounts)),Logger.success(`✅ 账号删除成功: ${accountId}`),!0}catch(error){return Logger.error(`❌ 删除账号失败: ${error.message}`),!1}}updateAccountStatus(accountId,status){try{const accounts=this.getAccounts(),accountIndex=accounts.findIndex(account=>account.id===accountId);return accountIndex!==-1&&(accounts[accountIndex].status=status,accounts[accountIndex].updatedAt=(new Date).toISOString(),localStorage.setItem(STORAGE_KEYS.accounts,JSON.stringify(accounts)),Logger.success(`✅ 账号状态更新成功: ${accountId} -> ${status}`),!0)}catch(error){return Logger.error(`❌ 更新账号状态失败: ${error.message}`),!1}}validateConfig(){const errors=[];return(!this.config.customDomains||this.config.customDomains.length===0)&&errors.push("未配置自定义域名"),(!this.config.tempEmailConfig||!this.config.tempEmailConfig.tempmail)&&errors.push("未配置tempmail.plus服务"),{isValid:errors.length===0,errors}}}class TempEmailManager{constructor(){this.currentEmail=null,this.first_id=null,this.maxRetries=CONFIG.tempEmail.maxRetries,this.retryDelay=CONFIG.tempEmail.retryDelay}async makeApiRequest(url,email){return new Promise((resolve,reject)=>{Logger.debug(`🌐 API请求: ${url}`),GM_xmlhttpRequest({method:"GET",url,headers:{accept:"application/json, text/javascript, */*; q=0.01","accept-language":"zh-CN,zh;q=0.9,en;q=0.8,en-GB;q=0.7,en-US;q=0.6","cache-control":"no-cache",pragma:"no-cache","sec-fetch-dest":"empty","sec-fetch-mode":"cors","sec-fetch-site":"same-origin","x-requested-with":"XMLHttpRequest",cookie:`email=${email}`,Referer:"https://tempmail.plus/zh/"},onload:function(response){if(Logger.debug(`📡 API响应状态: ${response.status}`),response.status===404){Logger.error(`API请求返回404，邮件可能不存在或API路径错误`),reject(new Error(`API请求返回404，邮件可能不存在或API路径错误`));return}if(response.status!==200){Logger.error(`API请求失败，HTTP状态码: ${response.status}`),reject(new Error(`API请求失败，HTTP状态码: ${response.status}`));return}try{const data=JSON.parse(response.responseText);if(!data.result&&data.err){if(data.err.code===1021&&data.err.msg==="Pin not valid."){Logger.error("epin无效，请检查epin配置"),reject(new Error("epin无效，请检查epin配置"));return}Logger.error(`tempmail API错误: ${data.err.msg}`),reject(new Error(`tempmail API错误: ${data.err.msg}`));return}Logger.debug(data),resolve(data)}catch(error){Logger.error(`JSON解析失败: ${error.message}`),reject(new Error(`解析响应失败: ${error.message}`))}},onerror:function(error){Logger.error(`API请求失败: HTTP ${error.status}: ${error.statusText}`),reject(new Error(`HTTP ${error.status}: ${error.statusText}`))}})})}async getMailList(email,epin="",limit=20){const url=`https://tempmail.plus/api/mails?email=${email}&limit=${limit}&epin=${epin}`;return await this.makeApiRequest(url,email,epin)}async getNewMails(email,epin="",firstId=null){let url=`https://tempmail.plus/api/mails?email=${email}&epin=${epin}&limit=50`;return firstId&&(url+=`&first_id=${firstId}`),await this.makeApiRequest(url,email,epin)}async getUnreadMails(email,epin=""){const url=`https://tempmail.plus/api/mails?email=${email}&epin=${epin}&unread=true&limit=50`;return await this.makeApiRequest(url,email,epin)}async getMailDetail(mailId,email,epin=""){const url=`https://tempmail.plus/api/mails/${mailId}?email=${email}&epin=${epin}`;return await this.makeApiRequest(url,email,epin)}async deleteMail(mailId,email,epin=""){const url=`https://tempmail.plus/api/mails/${mailId}?email=${email}&epin=${epin}`;return await this.makeApiRequest(url,email,epin)}extractVerificationCode(text){if(!text)return Logger.debug(`🔍 文本内容为空，无法提取验证码`),null;const patterns=[/\b(\d{6})\b/,/\b(\d{4,8})\b/,/verification[:\s]*(\d{4,8})/i,/code[:\s]*(\d{4,8})/i,/otp[:\s]*(\d{4,8})/i,/pin[:\s]*(\d{4,8})/i,/(\d{4,8})[^a-zA-Z]*verification/i,/(\d{4,8})[^a-zA-Z]*code/i,/(\d{4,8})[^a-zA-Z]*otp/i,/(\d{4,8})[^a-zA-Z]*pin/i];for(let i=0;i<patterns.length;i++){const pattern=patterns[i],match=text.match(pattern);if(match){const code=match[1]||match[0];return code}}const allNumbers=text.match(/\d{4,8}/g);return allNumbers?allNumbers[0]:null}isTargetEmail(mail,targetEmail){if(!targetEmail)return!0;Logger.debug(`📧 检查邮件匹配 - 目标邮箱: ${targetEmail}`);const toField=mail.to||mail.to_address||mail.recipient||mail.recipient_address,fromField=mail.from||mail.from_address||mail.sender||mail.sender_address,subjectField=mail.subject||mail.title||mail.topic,extractEmail=emailString=>{if(!emailString)return"";const match=emailString.match(/<([^>]+)>/);if(match){const extracted=match[1];return extracted}return emailString};if(toField){const extractedTo=extractEmail(toField);if(extractedTo.toLowerCase()===targetEmail.toLowerCase())return!0}if(fromField){const extractedFrom=extractEmail(fromField);if(extractedFrom.toLowerCase()===targetEmail.toLowerCase())return!0}if(subjectField&&subjectField.toLowerCase().includes(targetEmail.toLowerCase()))return!0;const content=mail.text||mail.html||mail.content||"";return!!(content&&content.toLowerCase().includes(targetEmail.toLowerCase()))}async getVerificationCode(timeout=CONFIG.tempEmail.verificationTimeout,targetEmail=null){const tempEmailConfig=ConfigManagerSingleton.getInstance().getTempEmailConfig(),tempmail=tempEmailConfig.tempmail,epin=tempEmailConfig.epin;if(!tempmail)throw new Error("未配置tempmail.plus服务");this.currentEmail=tempmail,Logger.info(`📧 开始监控邮箱: ${tempmail}`),targetEmail&&Logger.info(`🎯 目标邮箱: ${targetEmail}`),epin&&Logger.info(`🔑 使用epin: ${epin}`);const startTime=Date.now();let lastFirstId=null;for(;Date.now()-startTime<timeout;)try{Logger.debug(`🔄 获取新邮件...`);let mailListData;if(lastFirstId){mailListData=await this.getNewMails(tempmail,epin,lastFirstId),Logger.debug(`📧 使用first_id=${lastFirstId}获取新邮件`);const mailList=mailListData.mail_list||mailListData.result||[];if(mailList&&mailList.length>0){Logger.info(`📧 获取到 ${mailList.length} 封新邮件`);const newMails=mailList.filter(mail=>mail.is_new===!0);if(newMails.length>0){Logger.info(`📈 发现 ${newMails.length} 封新邮件，开始处理`);const sortedNewMails=newMails.sort((a,b)=>{const timeA=new Date(a.time||a.date||0).getTime(),timeB=new Date(b.time||b.date||0).getTime();return timeB-timeA});for(const mail of sortedNewMails){const mailId=mail.mail_id||mail.id||mail.mailId;Logger.debug(`📧 处理新邮件ID: ${mailId}, 时间: ${mail.time}`);try{const mailDetail=await this.getMailDetail(mailId,tempmail,epin);if(Logger.debug(`📧 获取邮件详情成功`),!this.isTargetEmail(mailDetail,targetEmail)){Logger.debug(`❌ 邮件不匹配目标邮箱，跳过`);continue}Logger.info(`✅ 邮件匹配成功，开始提取验证码`);const content=mailDetail.text||mailDetail.html||"";Logger.debug(`📧 邮件内容长度: ${content.length}`);const verificationCode=this.extractVerificationCode(content);if(verificationCode)return Logger.success(`✅ 找到验证码: ${verificationCode}`),Logger.info(`📧 邮件来源: ${mailDetail.from||"未知"}`),Logger.info(`📧 邮件主题: ${mailDetail.subject||"无主题"}`),verificationCode;Logger.debug(`🔍 邮件中未找到验证码`)}catch(error){Logger.error(`❌ 获取邮件详情失败: ${error.message}`)}}}else Logger.debug(`📧 没有新邮件`)}else Logger.debug(`📧 新邮件列表为空`)}else mailListData=await this.getMailList(tempmail,epin,50),Logger.debug(`📧 首次获取邮件列表，仅用于获取first_id`);mailListData.first_id&&(lastFirstId=mailListData.first_id,Logger.debug(`📧 更新first_id: ${lastFirstId}`));const delay=1e4;Logger.debug(`⏳ 等待 ${delay}ms 后重试...`),await new Promise(resolve=>setTimeout(resolve,delay))}catch(error){Logger.error(`❌ 获取邮件列表失败: ${error.message}`);const errorDelay=1e4;Logger.debug(`⏳ 错误后等待 ${errorDelay}ms 重试...`),await new Promise(resolve=>setTimeout(resolve,errorDelay))}return Logger.error(`❌ 验证码获取超时 (${timeout}ms)`),null}async testEmailConnection(){const tempEmailConfig=ConfigManagerSingleton.getInstance().getTempEmailConfig(),tempmail=tempEmailConfig.tempmail,epin=tempEmailConfig.epin;if(!tempmail)throw new Error("未配置tempmail.plus服务");try{Logger.info(`🧪 测试邮箱连接: ${tempmail}`);const mailListData=await this.getMailList(tempmail,epin,5),mailList=mailListData.mail_list||mailListData.result||[];return mailList&&mailList.length>=0?(Logger.success(`✅ 邮箱连接测试成功，当前邮件数量: ${mailList.length}`),!0):(Logger.warning(`⚠️ 邮箱连接测试返回空结果`),!1)}catch(error){return Logger.error(`❌ 邮箱连接测试失败: ${error.message}`),!1}}async getEmailStatus(){const tempEmailConfig=ConfigManagerSingleton.getInstance().getTempEmailConfig(),tempmail=tempEmailConfig.tempmail,epin=tempEmailConfig.epin;if(!tempmail)return{connected:!1,message:"未配置邮箱"};try{const mailListData=await this.getMailList(tempmail,epin,10),mailList=mailListData.mail_list||mailListData.result||[];return{connected:!0,email:tempmail,mailCount:mailList.length,lastMail:mailList.length>0?mailList[0].time||mailList[0].date:null}}catch(error){return{connected:!1,email:tempmail,error:error.message}}}}class Logger{static logCount=0;static maxLogs=CONFIG.ui.maxLogs;static addLog(message,type="info"){const logContainer=document.getElementById("log-container"),logCountElement=document.getElementById("log-count");if(!logContainer)return;const timestamp=(new Date).toLocaleTimeString(),typeColors={info:"#00ff00",success:"#00ff00",warning:"#ffff00",error:"#ff0000",debug:"#888888"},color=typeColors[type]||"#00ff00",icon={info:"ℹ️",success:"✅",warning:"⚠️",error:"❌",debug:"🔍"}[type]||"ℹ️",logEntry=document.createElement("div");logEntry.style.cssText=`
                color: ${color};
                margin-bottom: 4px;
                word-wrap: break-word;
            `,logEntry.innerHTML=`<span style="color: #888;">[${timestamp}]</span> ${icon} ${message}`,logContainer.appendChild(logEntry),this.logCount++,logCountElement&&(logCountElement.textContent=`${this.logCount} 条记录`),logContainer.scrollTop=logContainer.scrollHeight,logContainer.children.length>this.maxLogs&&logContainer.removeChild(logContainer.firstChild),console.log(`[${timestamp}] ${message}`)}static info(message){this.addLog(message,"info")}static success(message){this.addLog(message,"success")}static warning(message){this.addLog(message,"warning")}static error(message){this.addLog(message,"error")}static debug(message){this.addLog(message,"debug")}static clear(){const logContainer=document.getElementById("log-container"),logCountElement=document.getElementById("log-count");logContainer&&(logContainer.innerHTML='<div style="color: #888;">日志已清空...</div>'),logCountElement&&(logCountElement.textContent="0 条记录"),this.logCount=0,this.info("日志已清空")}}const ConfigManagerSingleton=function(){let instance=null;return{getInstance(){return instance||(instance=new ConfigManager),instance}}}(),passwordGenerator=new PasswordGenerator,configManager=ConfigManagerSingleton.getInstance(),tempEmailManager=new TempEmailManager;function generateFirstName(){const firstNames=["Alex","Jordan","Taylor","Casey","Morgan","Riley","Quinn","Avery","Blake","Cameron","Drew","Emery","Finley","Gray","Harper","Indigo","Jamie","Kendall","Logan","Mason","Noah","Oakley","Parker","Quinn","River","Sage","Tatum","Unity","Vale","Winter","Xander","Yuki","Zion","Aria","Bella","Chloe","Diana","Emma","Fiona","Grace","Hannah","Iris","Jade","Kate","Luna","Maya","Nova","Olivia","Penny","Ruby"];return firstNames[Math.floor(Math.random()*firstNames.length)]}function generateLastName(){const lastNames=["Smith","Johnson","Williams","Brown","Jones","Garcia","Miller","Davis","Rodriguez","Martinez","Hernandez","Lopez","Gonzalez","Wilson","Anderson","Thomas","Taylor","Moore","Jackson","Martin","Lee","Perez","Thompson","White","Harris","Sanchez","Clark","Ramirez","Lewis","Robinson","Walker","Young","Allen","King","Wright","Scott","Torres","Nguyen","Hill","Flores","Green","Adams","Nelson","Baker","Hall","Rivera","Campbell","Mitchell","Carter","Roberts"];return lastNames[Math.floor(Math.random()*lastNames.length)]}function generateRandomEmail(domain){const adjectives=["cool","smart","happy","bright","quick","fast","super","mega","ultra","pro"],nouns=["coder","dev","hacker","geek","ninja","master","guru","wizard","hero","star"],numbers=Math.floor(Math.random()*1e4),adjective=adjectives[Math.floor(Math.random()*adjectives.length)],noun=nouns[Math.floor(Math.random()*nouns.length)];return`${adjective}${noun}${numbers}@${domain}`}async function generateEmail(){Logger.info("📧 使用自定义域名模式");const customDomains=configManager.getCustomDomains();if(customDomains.length===0)return Logger.error("❌ 未配置自定义域名，请先在配置面板中设置域名"),null;const selectedCustomDomain=customDomains[Math.floor(Math.random()*customDomains.length)],customEmail=generateRandomEmail(selectedCustomDomain);return Logger.success(`✅ 生成自定义域名邮箱: ${customEmail}`),customEmail}function setInputValue(input,value){Logger.info(`🔧 开始设置 ${input.id} 的值为: ${value}`);let successMethod="未知",originalValue=input.value;input.value="",input.focus(),input.select();try{Logger.info("🔄直接调用React onChange");const reactKey=Object.keys(input).find(key=>key.startsWith("__reactProps$"));reactKey&&input[reactKey]&&input[reactKey].onChange?(Logger.info("找到React组件实例，调用onChange"),input[reactKey].onChange({target:{value},currentTarget:{value},type:"change"}),input.value===value&&successMethod==="未知"&&(successMethod=" 直接调用React onChange",Logger.success(`✅ ${successMethod} 成功`))):Logger.error("❌ 未找到React组件实例或onChange回调")}catch(e){Logger.error("❌ React onChange调用失败:",e)}setTimeout(()=>{Logger.info(`📊 ${input.id} 最终验证结果:`),Logger.info(`   原始值: "${originalValue}"`),Logger.info(`   目标值: "${value}"`),Logger.info(`   当前值: "${input.value}"`),Logger.info(`   是否成功: ${input.value===value?"✅ 是":"❌ 否"}`)},100)}function GoToRegisterButton(){if(document.getElementById("qoder-signin-btn"))return;const button=document.createElement("div");button.id="qoder-signin-btn",button.style.cssText=`
            position: fixed;
            top: 20px;
            right: 20px;
            z-index: ${CONFIG.ui.buttonZIndex};
            background: linear-gradient(135deg, #4CAF50 0%, #45a049 100%);
            color: white;
            border: none;
            border-radius: 8px;
            padding: 12px 20px;
            font-size: 14px;
            font-weight: 500;
            cursor: pointer;
            box-shadow: 0 4px 20px rgba(0,0,0,0.15);
            transition: all 0.3s ease;
            display: flex;
            align-items: center;
            gap: 8px;
        `,button.innerHTML="⚙️ 去注册（配置版）",button.addEventListener("mouseenter",()=>{button.style.transform="translateY(-2px)",button.style.boxShadow="0 6px 25px rgba(0,0,0,0.2)"}),button.addEventListener("mouseleave",()=>{button.style.transform="translateY(0)",button.style.boxShadow="0 4px 20px rgba(0,0,0,0.15)"}),button.addEventListener("click",()=>{Logger.info("点击注册助手入口，跳转到注册页面"),RouteManager.navigateToSignup()}),document.body.appendChild(button),Logger.info("创建登录页面注册助手入口按钮")}function RegisterPanel(){const panel=document.createElement("div");return panel.id="qoder-register-panel",panel.style.cssText=`
            position: fixed;
            top: 20px;
            right: 20px;
            z-index: ${CONFIG.ui.panelZIndex};
            background: rgba(255, 255, 255, 0.98);
            backdrop-filter: blur(15px);
            padding: 24px;
            border-radius: 16px;
            box-shadow: 0 8px 32px rgba(0,0,0,0.2);
            border: 1px solid rgba(255,255,255,0.3);
            min-width: 450px;
            max-width: 600px;
            max-height: 80vh;
            display: none;
            overflow: hidden;
        `,panel.innerHTML=`
            <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 20px;">
                <h3 style="margin: 0; color: #333; font-size: 18px;">⚙️ Qoder 注册助手 - 配置版</h3>
                <div style="display: flex; gap: 8px;">
                    <button id="clear-logs" style="background: #ff9800; color: white; border: none; border-radius: 4px; padding: 4px 8px; font-size: 12px; cursor: pointer;">清空日志</button>
                    <button id="close-register-panel" style="background: none; border: none; color: #666; font-size: 20px; cursor: pointer; padding: 0; width: 24px; height: 24px;">×</button>
                </div>
            </div>

            <div style="margin-bottom: 12px;">
                <button id="start-register" style="width: 100%; padding: 12px; background: linear-gradient(135deg, #4CAF50 0%, #45a049 100%); color: white; border: none; border-radius: 8px; font-weight: 500; cursor: pointer; transition: all 0.3s ease;">开始注册</button>
            </div>



            <div style="margin-bottom: 12px;">
                <button id="open-config" style="width: 100%; padding: 8px; background: linear-gradient(135deg, #2196F3 0%, #1976D2 100%); color: white; border: none; border-radius: 6px; font-size: 12px; cursor: pointer; transition: all 0.3s ease;">⚙️ 配置设置</button>
            </div>

            <div id="current-stage" style="margin-bottom: 16px; padding: 12px; background: #f5f5f5; border-radius: 6px; font-size: 14px; color: #666;">
                <div style="margin-bottom: 8px;">📊 当前阶段:</div>
                <div id="stage-info">检测中...</div>
            </div>

            <div style="margin-bottom: 12px;">
                <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 8px;">
                    <span style="font-weight: 500; color: #333;">📝 操作日志</span>
                    <span id="log-count" style="font-size: 12px; color: #666;">0 条记录</span>
                </div>
                <div id="log-container" style="
                    height: 200px;
                    background: #1e1e1e;
                    border-radius: 6px;
                    padding: 12px;
                    font-family: 'Courier New', monospace;
                    font-size: 12px;
                    color: #00ff00;
                    overflow-y: auto;
                    border: 1px solid #333;
                    line-height: 1.4;
                ">
                    <div style="color: #888;">等待开始注册...</div>
                </div>
            </div>
        `,panel}function createRegisterPanel(){return RegisterPanel()}function createFloatingButton(){if(document.getElementById("qoder-floating-btn"))return;const button=document.createElement("div");button.id="qoder-floating-btn",button.style.cssText=`
            position: fixed;
            top: 20px;
            right: 20px;
            z-index: ${CONFIG.ui.buttonZIndex};
            width: 50px;
            height: 50px;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            cursor: pointer;
            box-shadow: 0 4px 20px rgba(0,0,0,0.15);
            transition: all 0.3s ease;
            font-size: 20px;
            color: white;
            font-weight: bold;
        `,button.innerHTML="🚀",button.title="打开注册助手面板",button.addEventListener("mouseenter",()=>{button.style.transform="scale(1.1)",button.style.boxShadow="0 6px 25px rgba(0,0,0,0.2)"}),button.addEventListener("mouseleave",()=>{button.style.transform="scale(1)",button.style.boxShadow="0 4px 20px rgba(0,0,0,0.15)"}),button.addEventListener("click",()=>{showRegisterPanel()}),document.body.appendChild(button),Logger.info("✅ 创建悬浮按钮成功")}function hideRegisterButtons(){const floatingBtn=document.getElementById("qoder-floating-btn");floatingBtn&&(floatingBtn.style.display="none");const registerPanel=document.getElementById("qoder-register-panel");registerPanel&&(registerPanel.style.display="none");const signinBtn=document.getElementById("qoder-signin-btn");signinBtn&&(signinBtn.style.display="none");const verificationBtn=document.getElementById("qoder-verification-btn");verificationBtn&&(verificationBtn.style.display="none");const configPanel=document.getElementById("qoder-config-panel");configPanel&&(configPanel.style.display="none"),Logger.info("已隐藏所有注册助手按钮")}function OpenRegisterPanelButton(){return createFloatingButton()}function autoCheckCheckbox(){const checkbox=document.querySelector(SELECTORS.checkbox);Logger.info("查找复选框元素:",checkbox),checkbox&&!checkbox.checked?(Logger.info("自动勾选复选框:",checkbox),checkbox.click(),Logger.info("自动勾选复选框完成")):checkbox&&checkbox.checked?Logger.info("复选框勾选成功"):Logger.info("未找到复选框")}function isSignupPage(){if(!RouteManager.isSignupPage()){Logger.info("不在注册页面，跳过注册面板");return}Logger.info("在注册页面，开始注册助手..."),setTimeout(()=>{autoCheckCheckbox()},2e3)}function isSigninPageOrHomePage(){if(!RouteManager.isSigninOrHomePage())return;Logger.info("在登录页面，添加注册助手入口..."),setTimeout(()=>{GoToRegisterButton()},1e3)}function showRegisterPanel(){if(!PageManager.shouldShowRegisterPanel())return;let panel=document.getElementById("qoder-register-panel");panel||(panel=createRegisterPanel(),document.body.appendChild(panel),document.getElementById("close-register-panel").addEventListener("click",hideRegisterPanel),document.getElementById("start-register").addEventListener("click",startRegistration),document.getElementById("clear-logs").addEventListener("click",clearLogs),document.getElementById("open-config").addEventListener("click",showConfigPanel),Logger.info("创建注册面板")),panel.style.display="block";const floatingBtn=document.getElementById("qoder-floating-btn");floatingBtn&&(floatingBtn.style.display="none");const currentStage=detectCurrentStage();currentStage==="otp"&&createVerificationCodeButton(),window.stageMonitorInterval||(updateCurrentStage(),window.stageMonitorInterval=setInterval(()=>{updateCurrentStage();const currentStage=detectCurrentStage();currentStage==="otp"&&createVerificationCodeButton()},2e3)),Logger.info("面板已打开，等待开始注册...")}function hideRegisterPanel(){const panel=document.getElementById("qoder-register-panel");panel&&(panel.style.display="none");const floatingBtn=document.getElementById("qoder-floating-btn");floatingBtn&&(floatingBtn.style.display="flex");const verificationBtn=document.getElementById("qoder-verification-btn");verificationBtn&&(verificationBtn.style.display="none")}function createConfigPanel(){const panel=document.createElement("div");panel.id="qoder-config-panel",panel.style.cssText=`
            position: fixed;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            z-index: 10003;
            background: rgba(255, 255, 255, 0.98);
            backdrop-filter: blur(15px);
            padding: 24px;
            border-radius: 16px;
            box-shadow: 0 8px 32px rgba(0,0,0,0.2);
            border: 1px solid rgba(255,255,255,0.3);
            min-width: 500px;
            max-width: 600px;
            max-height: 80vh;
            display: none;
            overflow-y: auto;
        `;const config=configManager.config;return panel.innerHTML=`
            <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 20px;">
                <h3 style="margin: 0; color: #333; font-size: 18px;">⚙️ 配置设置</h3>
                <button id="close-config-panel" style="background: none; border: none; color: #666; font-size: 20px; cursor: pointer; padding: 0; width: 24px; height: 24px;">×</button>
            </div>

            <div style="margin-bottom: 20px;">
                <label style="display: block; margin-bottom: 8px; font-weight: 500; color: #333;">📧 邮箱生成模式:</label>
                <div style="padding: 8px; border: 1px solid #ddd; border-radius: 4px; font-size: 14px; background: #f5f5f5; color: #666;">
                    自定义域名模式（使用用户配置的域名生成邮箱）
                </div>
            </div>

                         <div style="margin-bottom: 20px;">
                 <label style="display: block; margin-bottom: 8px; font-weight: 500; color: #333;">🌐 自定义邮箱域名 (每行一个):</label>
                 <textarea id="custom-domains" style="width: 100%; height: 80px; padding: 8px; border: 1px solid #ddd; border-radius: 4px; font-size: 14px; resize: vertical;">${(config.customDomains||[]).join(`
`)}</textarea>
                 <small style="color: #666; font-size: 12px;">例如: example.com, mydomain.com</small>
             </div>



            <div style="margin-bottom: 20px;">
                <label style="display: block; margin-bottom: 8px; font-weight: 500; color: #333;">🔑 临时邮箱服务配置:</label>
                                 <div style="margin-bottom: 15px;">
                     <h4 style="margin: 0 0 8px 0; color: #333; font-size: 14px;">临时邮箱服务配置:</h4>
                                         <div style="margin-bottom: 8px;">
                        <input type="text" id="tempmail" value="${config.tempEmailConfig&&config.tempEmailConfig.tempmail||""}" style="width: 100%; padding: 8px; border: 1px solid #ddd; border-radius: 4px; font-size: 14px;" placeholder="tempmail.plus 配置" style="::placeholder { color: #999; }">
                    </div>
                    <div style="margin-bottom: 8px;">
                        <input type="text" id="epin" value="${config.tempEmailConfig&&config.tempEmailConfig.epin||""}" style="width: 100%; padding: 8px; border: 1px solid #ddd; border-radius: 4px; font-size: 14px;" placeholder="epin 配置" style="::placeholder { color: #999; }">
                    </div>
                 </div>

                <small style="color: #666; font-size: 12px;">用于接收自定义域名邮箱转发过来的验证码</small>
            </div>

            <div style="margin-bottom: 20px;">
                <label style="display: flex; align-items: center; margin-bottom: 8px; font-weight: 500; color: #333;">
                    <input type="checkbox" id="auto-fetch" ${config.autoFetchVerificationCode?"checked":""} style="margin-right: 8px;">
                    自动获取验证码 (通过tempmail.plus接收)
                </label>
            </div>

            <div style="display: flex; gap: 10px; justify-content: flex-end;">
                <button id="view-saved-accounts" style="padding: 10px 20px; background: linear-gradient(135deg, #2196F3 0%, #1976D2 100%); color: white; border: none; border-radius: 6px; font-size: 14px; cursor: pointer;">📚 查看账号</button>
                <button id="test-stage-detection" style="padding: 10px 20px; background: linear-gradient(135deg, #9C27B0 0%, #7B1FA2 100%); color: white; border: none; border-radius: 6px; font-size: 14px; cursor: pointer;">测试阶段检测</button>
                <button id="save-config" style="padding: 10px 20px; background: linear-gradient(135deg, #4CAF50 0%, #45a049 100%); color: white; border: none; border-radius: 6px; font-size: 14px; cursor: pointer;">保存配置</button>
                <button id="reset-config" style="padding: 10px 20px; background: linear-gradient(135deg, #FF9800 0%, #F57C00 100%); color: white; border: none; border-radius: 6px; font-size: 14px; cursor: pointer;">重置默认</button>
            </div>
        `,setTimeout(()=>{document.getElementById("close-config-panel").addEventListener("click",()=>{configPanel.style.display="none"}),document.getElementById("view-saved-accounts").addEventListener("click",()=>{configPanel.style.display="none",showAllAccountsPanel()}),document.getElementById("save-config").addEventListener("click",saveConfig),document.getElementById("reset-config").addEventListener("click",resetConfig),document.getElementById("test-stage-detection").addEventListener("click",testStageDetection)},100),panel}function showConfigPanel(){let configPanel=document.getElementById("qoder-config-panel");configPanel||(configPanel=createConfigPanel(),document.body.appendChild(configPanel)),configPanel.style.display="block"}function showAllAccountsPanel(){const accounts=configManager.getAccounts(),existingPanel=document.getElementById("qoder-all-accounts-panel");existingPanel&&existingPanel.remove();const panel=document.createElement("div");if(panel.id="qoder-all-accounts-panel",panel.style.cssText=`
            position: fixed;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            background: white;
            border-radius: 12px;
            box-shadow: 0 10px 40px rgba(0,0,0,0.3);
            padding: 24px;
            z-index: 10003;
            max-width: 600px;
            width: 90%;
            max-height: 80vh;
            overflow-y: auto;
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
        `,accounts.length===0)panel.innerHTML=`
                <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 20px;">
                    <h3 style="margin: 0; color: #333; font-size: 18px;">📚 已保存的账号</h3>
                    <button id="close-all-accounts" style="background: none; border: none; font-size: 20px; cursor: pointer; color: #666;">×</button>
                </div>
                <div style="text-align: center; padding: 40px; color: #666;">
                    <div style="font-size: 48px; margin-bottom: 16px;">📭</div>
                    <div>暂无保存的账号</div>
                </div>
            `;else{const accountsHtml=accounts.map(account=>`
                <div style="background: #f8f9fa; border-radius: 8px; padding: 16px; margin-bottom: 12px; border-left: 4px solid #4CAF50;">
                    <div style="display: flex; justify-content: space-between; align-items: flex-start; margin-bottom: 8px;">
                        <div style="font-weight: bold; color: #333;">${account.firstName} ${account.lastName}</div>
                        <div style="display: flex; gap: 4px;">
                            <button class="copy-account" data-id="${account.id}" style="background: none; border: none; color: #007bff; cursor: pointer; font-size: 12px;">📋</button>
                            <button class="delete-account" data-id="${account.id}" style="background: none; border: none; color: #dc3545; cursor: pointer; font-size: 12px;">🗑️</button>
                        </div>
                    </div>
                    <div style="font-size: 12px; color: #666; line-height: 1.4;">
                        <div><strong>邮箱:</strong> ${account.email}</div>
                        <div><strong>密码:</strong> <span class="password-display" style="font-family: monospace;">••••••••••••</span> <button class="toggle-password" data-id="${account.id}" style="background: none; border: none; color: #007bff; cursor: pointer; font-size: 11px;">显示</button></div>
                        <div><strong>域名:</strong> ${account.domain}</div>
                        <div><strong>注册时间:</strong> ${new Date(account.createdAt).toLocaleString()}</div>
                        <div><strong>状态:</strong> <span style="color: #4CAF50;">${account.status}</span></div>
                    </div>
                </div>
            `).join("");panel.innerHTML=`
                <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 20px;">
                    <h3 style="margin: 0; color: #333; font-size: 18px;">📚 已保存的账号 (${accounts.length})</h3>
                    <button id="close-all-accounts" style="background: none; border: none; font-size: 20px; cursor: pointer; color: #666;">×</button>
                </div>
                <div style="margin-bottom: 16px;">
                    <button id="export-accounts" style="padding: 8px 16px; background: linear-gradient(135deg, #4CAF50 0%, #45a049 100%); color: white; border: none; border-radius: 6px; font-size: 14px; cursor: pointer;">📤 导出所有账号</button>
                    <button id="clear-all-accounts" style="padding: 8px 16px; background: linear-gradient(135deg, #dc3545 0%, #c82333 100%); color: white; border: none; border-radius: 6px; font-size: 14px; cursor: pointer; margin-left: 8px;">🗑️ 清空所有账号</button>
                </div>
                <div id="accounts-list">
                    ${accountsHtml}
                </div>
            `}document.body.appendChild(panel),setTimeout(()=>{document.getElementById("close-all-accounts").addEventListener("click",()=>{panel.remove()});const exportBtn=document.getElementById("export-accounts");exportBtn&&exportBtn.addEventListener("click",()=>{const accountsText=accounts.map(account=>`姓名: ${account.firstName} ${account.lastName}\n邮箱: ${account.email}\n密码: ${account.password}\n域名: ${account.domain}\n注册时间: ${new Date(account.createdAt).toLocaleString()}\n状态: ${account.status}\n${"-".repeat(50)}`).join(`

`),blob=new Blob([accountsText],{type:"text/plain"}),url=URL.createObjectURL(blob),a=document.createElement("a");a.href=url,a.download=`qoder_accounts_${(new Date).toISOString().split("T")[0]}.txt`,document.body.appendChild(a),a.click(),document.body.removeChild(a),URL.revokeObjectURL(url),showToast("账号信息已导出","success")});const clearBtn=document.getElementById("clear-all-accounts");clearBtn&&clearBtn.addEventListener("click",()=>{confirm("确定要清空所有保存的账号吗？此操作不可恢复！")&&(localStorage.removeItem(STORAGE_KEYS.accounts),showToast("所有账号已清空","success"),panel.remove())}),document.querySelectorAll(".copy-account").forEach(btn=>{btn.addEventListener("click",()=>{const accountId=btn.getAttribute("data-id"),account=accounts.find(acc=>acc.id===accountId);if(account){const accountText=`姓名: ${account.firstName} ${account.lastName}\n邮箱: ${account.email}\n密码: ${account.password}\n域名: ${account.domain}\n注册时间: ${new Date(account.createdAt).toLocaleString()}`;navigator.clipboard.writeText(accountText).then(()=>{showToast("账号信息已复制","success")}).catch(()=>{const textArea=document.createElement("textarea");textArea.value=accountText,document.body.appendChild(textArea),textArea.select(),document.execCommand("copy"),document.body.removeChild(textArea),showToast("账号信息已复制","success")})}})}),document.querySelectorAll(".delete-account").forEach(btn=>{btn.addEventListener("click",()=>{const accountId=btn.getAttribute("data-id");confirm("确定要删除这个账号吗？")&&(configManager.deleteAccount(accountId),showToast("账号已删除","success"),panel.remove(),showAllAccountsPanel())})}),document.querySelectorAll(".toggle-password").forEach(btn=>{btn.addEventListener("click",()=>{const accountId=btn.getAttribute("data-id"),account=accounts.find(acc=>acc.id===accountId),passwordDisplay=btn.previousElementSibling;passwordDisplay.textContent==="••••••••••••"?(passwordDisplay.textContent=account.password,btn.textContent="隐藏"):(passwordDisplay.textContent="••••••••••••",btn.textContent="显示")})})},100)}function showAccountInfoPanel(accountInfo){const existingPanel=document.getElementById("qoder-account-info-panel");existingPanel&&existingPanel.remove();const panel=document.createElement("div");panel.id="qoder-account-info-panel",panel.style.cssText=`
            position: fixed;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            background: white;
            border-radius: 12px;
            box-shadow: 0 10px 40px rgba(0,0,0,0.3);
            padding: 24px;
            z-index: 10003;
            max-width: 400px;
            width: 90%;
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
        `,panel.innerHTML=`
            <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 20px;">
                <h3 style="margin: 0; color: #333; font-size: 18px;">🎉 注册成功！</h3>
                <button id="close-account-info" style="background: none; border: none; font-size: 20px; cursor: pointer; color: #666;">×</button>
            </div>

            <div style="background: #f8f9fa; border-radius: 8px; padding: 16px; margin-bottom: 16px;">
                <h4 style="margin: 0 0 12px 0; color: #333; font-size: 14px;">📋 账号信息</h4>
                <div style="font-size: 13px; line-height: 1.5; color: #666;">
                    <div><strong>姓名:</strong> ${accountInfo.firstName} ${accountInfo.lastName}</div>
                    <div><strong>邮箱:</strong> ${accountInfo.email}</div>
                    <div><strong>密码:</strong> <span id="password-display" style="font-family: monospace;">••••••••••••</span> <button id="toggle-password" style="background: none; border: none; color: #007bff; cursor: pointer; font-size: 12px;">显示</button></div>
                    <div><strong>域名:</strong> ${accountInfo.domain}</div>
                    <div><strong>注册时间:</strong> ${new Date(accountInfo.registrationTime).toLocaleString()}</div>
                </div>
            </div>

            <div style="display: flex; gap: 8px;">
                <button id="copy-account-info" style="flex: 1; padding: 10px; background: linear-gradient(135deg, #4CAF50 0%, #45a049 100%); color: white; border: none; border-radius: 6px; font-size: 14px; cursor: pointer;">📋 复制信息</button>
                <button id="view-all-accounts" style="flex: 1; padding: 10px; background: linear-gradient(135deg, #2196F3 0%, #1976D2 100%); color: white; border: none; border-radius: 6px; font-size: 14px; cursor: pointer;">📚 查看所有</button>
            </div>
        `,document.body.appendChild(panel),setTimeout(()=>{document.getElementById("close-account-info").addEventListener("click",()=>{panel.remove()});let passwordVisible=!1;document.getElementById("toggle-password").addEventListener("click",()=>{const passwordDisplay=document.getElementById("password-display"),toggleBtn=document.getElementById("toggle-password");passwordVisible?(passwordDisplay.textContent="••••••••••••",toggleBtn.textContent="显示"):(passwordDisplay.textContent=accountInfo.password,toggleBtn.textContent="隐藏"),passwordVisible=!passwordVisible}),document.getElementById("copy-account-info").addEventListener("click",()=>{const accountText=`姓名: ${accountInfo.firstName} ${accountInfo.lastName}\n邮箱: ${accountInfo.email}\n密码: ${accountInfo.password}\n域名: ${accountInfo.domain}\n注册时间: ${new Date(accountInfo.registrationTime).toLocaleString()}`;navigator.clipboard.writeText(accountText).then(()=>{showToast("账号信息已复制到剪贴板","success")}).catch(()=>{const textArea=document.createElement("textarea");textArea.value=accountText,document.body.appendChild(textArea),textArea.select(),document.execCommand("copy"),document.body.removeChild(textArea),showToast("账号信息已复制到剪贴板","success")})}),document.getElementById("view-all-accounts").addEventListener("click",()=>{panel.remove(),showAllAccountsPanel()})},100)}async function testApi(config){try{if(config.tempEmailConfig&&config.tempEmailConfig.tempmail){const tempmail=config.tempEmailConfig.tempmail,epin=config.tempEmailConfig.epin;if(!tempmail)return Logger.error("❌ tempmail配置为空"),!1;Logger.info(`🧪 测试配置 - 邮箱: ${tempmail}, epin: ${epin||"未设置"}`);const tempEmailManager=new TempEmailManager;try{const data=await tempEmailManager.getMailList(tempmail,epin,5);return Logger.success("✅ tempmail配置验证通过"),!0}catch(error){return Logger.error(`❌ tempmail API调用失败: ${error.message}`),!1}}return!0}catch(error){return Logger.error(`❌ 配置测试失败: ${error.message}`),!1}}async function saveConfig(){const customDomains=document.getElementById("custom-domains").value.split(`
`).filter(domain=>domain.trim()),autoFetch=document.getElementById("auto-fetch").checked,tempmail=document.getElementById("tempmail").value.trim(),epin=document.getElementById("epin").value.trim(),newConfig={customDomains,autoFetchVerificationCode:autoFetch,tempEmailConfig:{tempmail,epin,first_id:""}};Logger.info("🧪 正在测试配置...");const testResult=await testApi(newConfig);if(testResult)configManager.updateConfig(newConfig),Logger.success("✅ 配置验证通过，已保存"),showToast("配置验证通过，已保存","success");else{Logger.error("❌ 配置验证失败，请检查配置"),showToast("配置验证失败，请检查配置","error");return}document.getElementById("qoder-config-panel").style.display="none"}function resetConfig(){const defaultConfig=configManager.getDefaultConfig();configManager.updateConfig(defaultConfig);const configPanel=document.getElementById("qoder-config-panel");configPanel&&configPanel.remove(),showConfigPanel(),Logger.info("🔄 配置已重置为默认值"),showToast("配置已重置为默认值","info")}function testStageDetection(){Logger.info("🧪 开始测试页面阶段检测...");const firstNameInput=document.querySelector('input[id="basic_firstName"]'),lastNameInput=document.querySelector('input[id="basic_lastName"]'),emailInput=document.querySelector('input[id="basic_email"]'),passwordInput=document.querySelector('input[id="basic_password"]'),captchaCheckbox=document.querySelector("#aliyunCaptcha-checkbox-icon"),otpInputs=document.querySelectorAll(".ant-otp-input"),verificationCodeContainer=document.querySelector(".verificationCode--o_u9MiU");if(Logger.info("📊 页面元素检测结果:"),Logger.info(`   姓名输入框: ${firstNameInput?"✅ 存在":"❌ 不存在"}`),Logger.info(`   姓氏输入框: ${lastNameInput?"✅ 存在":"❌ 不存在"}`),Logger.info(`   邮箱输入框: ${emailInput?"✅ 存在":"❌ 不存在"}`),Logger.info(`   密码输入框: ${passwordInput?"✅ 存在":"❌ 不存在"}`),firstNameInput){const firstNameFormItem=firstNameInput.closest(".ant-form-item"),isFirstNameHidden=firstNameFormItem&&firstNameFormItem.classList.contains("ant-form-item-hidden");Logger.info(`   姓名输入框状态: ${isFirstNameHidden?"🔒 隐藏":"👁️ 可见"}`)}if(lastNameInput){const lastNameFormItem=lastNameInput.closest(".ant-form-item"),isLastNameHidden=lastNameFormItem&&lastNameFormItem.classList.contains("ant-form-item-hidden");Logger.info(`   姓氏输入框状态: ${isLastNameHidden?"🔒 隐藏":"👁️ 可见"}`)}if(emailInput){const emailFormItem=emailInput.closest(".ant-form-item"),isEmailHidden=emailFormItem&&emailFormItem.classList.contains("ant-form-item-hidden");Logger.info(`   邮箱输入框状态: ${isEmailHidden?"🔒 隐藏":"👁️ 可见"}`)}if(passwordInput){const passwordFormItem=passwordInput.closest(".ant-form-item"),isPasswordHidden=passwordFormItem&&passwordFormItem.classList.contains("ant-form-item-hidden");Logger.info(`   密码输入框状态: ${isPasswordHidden?"🔒 隐藏":"👁️ 可见"}`)}Logger.info(`   验证码复选框: ${captchaCheckbox?"✅ 存在":"❌ 不存在"}`),Logger.info(`   验证码输入框: ${otpInputs.length>0?`✅ 存在 ${otpInputs.length} 个`:"❌ 不存在"}`),Logger.info(`   验证码容器: ${verificationCodeContainer?"✅ 存在":"❌ 不存在"}`);const titleElement=document.querySelector("h5.title--ld_VROk");titleElement&&Logger.info(`   页面标题: "${titleElement.textContent}"`);const otpTitleElement=document.querySelector("h5.title--JYxHTYG");otpTitleElement&&Logger.info(`   邮箱验证标题: "${otpTitleElement.textContent}"`),Logger.info("🔍 各阶段检测结果:"),Logger.info(`   第一阶段检测: ${isFirstStage()?"✅ 是":"❌ 否"}`),Logger.info(`   第二阶段检测: ${isSecondStage()?"✅ 是":"❌ 否"}`),Logger.info(`   第三阶段检测: ${isCaptchaStage()?"✅ 是":"❌ 否"}`),Logger.info(`   第四阶段检测: ${isOtpStage()?"✅ 是":"❌ 否"}`),Logger.info(`   成功页面检测: ${isSuccessStage()?"✅ 是":"❌ 否"}`);const currentStage=detectCurrentStage();Logger.info(`🎯 最终检测到的阶段: ${currentStage}`),showToast(`阶段检测结果: ${currentStage}`,"info")}function updateCurrentStage(){const stageInfo=document.getElementById("stage-info");if(!stageInfo)return;const currentStage=detectCurrentStage();let stageText="",stageColor="#666";switch(currentStage){case"first":stageText="第一阶段：姓名和邮箱填写",stageColor="#2196F3";break;case"second":stageText="第二阶段：密码设置",stageColor="#FF9800";break;case"captcha":stageText="第三阶段：人机验证",stageColor="#9C27B0";break;case"otp":stageText="第四阶段：邮箱验证码",stageColor="#4CAF50";break;case"success":stageText="注册完成",stageColor="#4CAF50";break;default:stageText="未知阶段：等待页面加载",stageColor="#666"}stageInfo.textContent=stageText,stageInfo.style.color=stageColor}function detectCurrentStage(){return isFirstStage()?"first":isSecondStage()?"second":isCaptchaStage()?"captcha":isOtpStage()?"otp":isSuccessStage()?"success":"unknown"}function isFirstStage(){const firstNameInput=document.querySelector('input[id="basic_firstName"]'),lastNameInput=document.querySelector('input[id="basic_lastName"]'),emailInput=document.querySelector('input[id="basic_email"]'),passwordInput=document.querySelector('input[id="basic_password"]');if(firstNameInput&&lastNameInput&&emailInput){const firstNameFormItem=firstNameInput.closest(".ant-form-item"),lastNameFormItem=lastNameInput.closest(".ant-form-item"),emailFormItem=emailInput.closest(".ant-form-item"),isFirstNameVisible=!firstNameFormItem||!firstNameFormItem.classList.contains("ant-form-item-hidden"),isLastNameVisible=!lastNameFormItem||!lastNameFormItem.classList.contains("ant-form-item-hidden"),isEmailVisible=!emailFormItem||!emailFormItem.classList.contains("ant-form-item-hidden");if(isFirstNameVisible&&isLastNameVisible&&isEmailVisible)return!0}return!1}function isSecondStage(){const passwordInput=document.querySelector('input[id="basic_password"]'),firstNameInput=document.querySelector('input[id="basic_firstName"]'),lastNameInput=document.querySelector('input[id="basic_lastName"]'),emailInput=document.querySelector('input[id="basic_email"]');if(passwordInput&&firstNameInput&&lastNameInput&&emailInput){const passwordFormItem=passwordInput.closest(".ant-form-item"),firstNameFormItem=firstNameInput.closest(".ant-form-item"),lastNameFormItem=lastNameInput.closest(".ant-form-item"),emailFormItem=emailInput.closest(".ant-form-item"),isPasswordVisible=!passwordFormItem||!passwordFormItem.classList.contains("ant-form-item-hidden"),isFirstNameHidden=firstNameFormItem&&firstNameFormItem.classList.contains("ant-form-item-hidden"),isLastNameHidden=lastNameFormItem&&lastNameFormItem.classList.contains("ant-form-item-hidden"),isEmailHidden=emailFormItem&&emailFormItem.classList.contains("ant-form-item-hidden");if(isPasswordVisible&&isFirstNameHidden&&isLastNameHidden&&isEmailHidden)return!0}return!1}function isCaptchaStage(){const captchaCheckbox=document.querySelector("#aliyunCaptcha-checkbox-icon"),captchaBody=document.querySelector("#aliyunCaptcha-checkbox-body"),captchaText=document.querySelector("#aliyunCaptcha-checkbox-text"),captchaElement=document.querySelector("#captcha-element"),captchaButton=document.querySelector("#captcha-button"),titleElement=document.querySelector("h5.title--ld_VROk"),titleText=titleElement?titleElement.textContent:"";if(captchaCheckbox||captchaBody||captchaText||captchaElement||captchaButton)return!0;if(titleText.toLowerCase().includes("human")||titleText.toLowerCase().includes("robot")||titleText.toLowerCase().includes("captcha"))return!0;if(captchaText&&captchaText.textContent){const text=captchaText.textContent.toLowerCase();if(text.includes("robot")||text.includes("human")||text.includes("captcha"))return!0}return!1}function isOtpStage(){const otpInputs=document.querySelectorAll(".ant-otp-input"),verificationCodeContainer=document.querySelector(".verificationCode--o_u9MiU"),otpWrapper=document.querySelector(".ant-otp"),titleElement=document.querySelector("h5.title--JYxHTYG"),titleText=titleElement?titleElement.textContent:"";return!!(otpInputs.length>0||verificationCodeContainer||otpWrapper)||!!(titleText.toLowerCase().includes("verify your email")||titleText.toLowerCase().includes("enter the code")||titleText.toLowerCase().includes("verification"))}function isSuccessStage(){const successMessage=document.querySelector("h3.title--IVM9xGl"),successText=successMessage?successMessage.textContent:"",currentUrl=window.location.href;return!!(successText.toLowerCase().includes("welcome")||successText.toLowerCase().includes("success")||currentUrl.includes("/account/profile")||currentUrl.includes("/dashboard"))&&(saveAccountOnSuccess(),!0)}function saveAccountOnSuccess(){try{if(window.accountSaved)return;const userInfo=window.lastGeneratedUserInfo;if(!userInfo){Logger.warning("⚠️ 未找到用户信息，无法保存账号");return}const accountInfo={firstName:userInfo.firstName,lastName:userInfo.lastName,email:userInfo.email,password:userInfo.password,domain:userInfo.email.split("@")[1],registrationTime:(new Date).toISOString()},accountId=configManager.saveAccount(accountInfo);accountId&&(window.accountSaved=!0,Logger.success(`🎉 注册成功！账号已保存，ID: ${accountId}`),showToast("注册成功！账号信息已保存","success"),showAccountInfoPanel(accountInfo))}catch(error){Logger.error(`❌ 保存账号信息失败: ${error.message}`)}}async function startRegistration(){Logger.info("🚀 开始注册流程（配置版）"),updateButtonState(!0);try{const config=configManager.config;if(!config.customDomains||config.customDomains.length===0){Logger.error("❌ 未配置自定义域名，请先在配置面板中设置域名"),showToast("请先在配置面板中设置自定义域名","error"),updateButtonState(!1);return}if(!config.tempEmailConfig||!config.tempEmailConfig.tempmail){Logger.error("❌ 未配置tempmail.plus服务，请先在配置面板中设置"),showToast("请先在配置面板中设置tempmail.plus服务","error"),updateButtonState(!1);return}config.tempEmailConfig.epin&&config.tempEmailConfig.epin.trim()===""?Logger.warning("⚠️ epin配置为空字符串，如果临时邮箱服务需要epin，请配置正确的值"):config.tempEmailConfig.epin?Logger.info(`🔑 epin已配置: ${config.tempEmailConfig.epin}`):Logger.info("ℹ️ epin未配置（可选）"),Logger.success("✅ 配置验证通过");const userInfo={firstName:generateFirstName(),lastName:generateLastName(),email:await generateEmail(),password:passwordGenerator.generate(12)};window.lastGeneratedUserInfo=userInfo,tempEmailManager.currentEmail=userInfo.email,window.lastGeneratedEmail=userInfo.email,Logger.info(`📝 生成注册数据: ${userInfo.firstName} ${userInfo.lastName} | ${userInfo.email}`);const currentStage=detectCurrentStage();if(Logger.info(`🔍 检测到当前阶段: ${currentStage}`),currentStage==="first")Logger.info("📋 第一阶段：填写姓名和邮箱"),fillFirstStageForm(userInfo),setTimeout(()=>{const continueBtn=document.querySelector(SELECTORS.continueBtn);continueBtn?(Logger.info("🔄 点击Continue按钮进入密码设置"),continueBtn.click(),setTimeout(()=>{Logger.info("⏳ 等待页面跳转完成，开始填写密码"),fillSecondStageForm(userInfo)},4e3)):(Logger.error("❌ 未找到Continue按钮"),updateButtonState(!1))},3e3);else if(currentStage==="second")Logger.info("🔐 第二阶段：填写密码"),fillSecondStageForm(userInfo),setTimeout(async()=>{const continueBtn=document.querySelector(SELECTORS.continueBtn);continueBtn?(Logger.info("🔄 点击Continue按钮进入人机验证"),continueBtn.click(),showToast("已跳转到人机验证页面","success"),setTimeout(async()=>{const tempEmailConfig=configManager.getTempEmailConfig(),tempmail=tempEmailConfig.tempmail,epin=tempEmailConfig.epin;if(tempmail){tempEmailManager.currentEmail=tempmail,Logger.info(`📧 使用临时邮箱: ${tempmail}`),epin&&Logger.info(`🔑 使用epin: ${epin}`);try{const mailListData=await tempEmailManager.getMailList(tempmail,epin,20);mailListData.result&&mailListData.first_id!==void 0&&mailListData.first_id!==null&&(tempEmailManager.lastFirstId=mailListData.first_id,Logger.info(`📧 邮件列表初始化完成，first_id: ${mailListData.first_id}`))}catch(error){Logger.warning(`⚠️ 邮件列表初始化失败: ${error.message}`)}}},2e3)):(Logger.error("❌ 未找到Continue按钮"),updateButtonState(!1))},3e3);else if(currentStage==="captcha"){if(Logger.info("🤖 第三阶段：开始人机验证"),tempEmailManager.lastFirstId!==void 0&&tempEmailManager.lastFirstId!==null)Logger.info(`📧 邮件列表已初始化，first_id: ${tempEmailManager.lastFirstId}`);else{Logger.warning("⚠️ 邮件列表未初始化，尝试重新初始化");const tempEmailConfig=configManager.getTempEmailConfig(),tempmail=tempEmailConfig.tempmail,epin=tempEmailConfig.epin;if(tempmail){tempEmailManager.currentEmail=tempmail,Logger.info(`📧 使用临时邮箱: ${tempmail}`),epin&&Logger.info(`🔑 使用epin: ${epin}`);try{const mailListData=await tempEmailManager.getMailList(tempmail,epin,20);mailListData.result&&mailListData.first_id!==void 0&&mailListData.first_id!==null&&(tempEmailManager.lastFirstId=mailListData.first_id,Logger.info(`📧 邮件列表初始化完成，first_id: ${mailListData.first_id}`))}catch(error){Logger.warning(`⚠️ 邮件列表初始化失败: ${error.message}`)}}}simulateHumanVerification()}else currentStage==="otp"?(Logger.info("📧 第四阶段：邮箱验证码页面"),createVerificationCodeButton(),configManager.isAutoFetchEnabled()?(Logger.info("🤖 启用自动验证码获取模式"),await handleOtpStageWithAutoFetch()):(showToast('当前是邮箱验证码阶段，请点击"获取验证码"按钮或手动输入验证码',"info"),handleOtpStage()),updateButtonState(!1)):currentStage==="success"?(Logger.success("🎉 注册已完成！"),showToast("注册已完成！","success"),updateButtonState(!1)):(Logger.warning("⏳ 未检测到表单字段，等待页面加载"),showToast("正在等待页面加载...","info"),updateButtonState(!1))}catch(error){Logger.error(`❌ 注册流程出错: ${error.message}`),showToast("注册流程出错，请重试","error"),updateButtonState(!1)}}function fillFirstStageForm(userInfo){const firstNameInput=document.querySelector(SELECTORS.firstName),lastNameInput=document.querySelector(SELECTORS.lastName),emailInput=document.querySelector(SELECTORS.email);if(!firstNameInput||!lastNameInput||!emailInput){Logger.error("❌ 未找到第一阶段表单字段"),showToast("未找到第一阶段表单字段","error"),updateButtonState(!1);return}Logger.info("📝 开始填写第一阶段表单"),setInputValue(firstNameInput,userInfo.firstName),Logger.success(`✅ 填写姓名: ${userInfo.firstName}`),setTimeout(()=>{setInputValue(lastNameInput,userInfo.lastName),Logger.success(`✅ 填写姓氏: ${userInfo.lastName}`)},800),setTimeout(()=>{setInputValue(emailInput,userInfo.email),Logger.success(`✅ 填写邮箱: ${userInfo.email}`)},1600),setTimeout(()=>{const checkbox=document.querySelector(SELECTORS.checkbox);checkbox&&!checkbox.checked?(checkbox.click(),Logger.success("✅ 自动勾选复选框")):checkbox&&checkbox.checked&&Logger.info("ℹ️ 复选框已经勾选"),Logger.success("🎉 第一阶段表单填写完成"),showToast("第一阶段表单填写完成！请点击Continue进入密码设置","success")},2400)}function fillSecondStageForm(userInfo){const passwordInput=document.querySelector(SELECTORS.password);if(!passwordInput){Logger.error("❌ 未找到密码输入字段"),showToast("未找到密码输入字段","error"),updateButtonState(!1);return}Logger.info("🔐 开始填写第二阶段表单"),setInputValue(passwordInput,userInfo.password),Logger.success(`✅ 填写密码: ${userInfo.password}`),Logger.success("🎉 第二阶段表单填写完成"),showToast("密码设置完成！","success"),setTimeout(()=>{const continueBtn=document.querySelector(SELECTORS.continueBtn);continueBtn?(Logger.info("🔄 密码填写完成，点击Continue按钮进入人机验证"),continueBtn.click(),showToast("已跳转到人机验证页面","success"),setTimeout(()=>{Logger.info("⏳ 等待人机验证页面加载完成"),simulateHumanVerification()},4e3)):(Logger.error("❌ 未找到Continue按钮"),updateButtonState(!1))},3e3)}let logCount=0;const maxLogs=CONFIG.ui.maxLogs;function addLog(message,type="info"){const logContainer=document.getElementById("log-container"),logCountElement=document.getElementById("log-count");if(!logContainer)return;const timestamp=(new Date).toLocaleTimeString(),typeColors={info:"#00ff00",success:"#00ff00",warning:"#ffff00",error:"#ff0000",debug:"#888888"},color=typeColors[type]||"#00ff00",icon={info:"ℹ️",success:"✅",warning:"⚠️",error:"❌",debug:"🔍"}[type]||"ℹ️",logEntry=document.createElement("div");logEntry.style.cssText=`
            color: ${color};
            margin-bottom: 4px;
            word-wrap: break-word;
        `,logEntry.innerHTML=`<span style="color: #888;">[${timestamp}]</span> ${icon} ${message}`,logContainer.appendChild(logEntry),logCount++,logCountElement&&(logCountElement.textContent=`${logCount} 条记录`),logContainer.scrollTop=logContainer.scrollHeight,logContainer.children.length>maxLogs&&logContainer.removeChild(logContainer.firstChild),console.log(`[${timestamp}] ${message}`)}function clearLogs(){const logContainer=document.getElementById("log-container"),logCountElement=document.getElementById("log-count");logContainer&&(logContainer.innerHTML='<div style="color: #888;">日志已清空...</div>'),logCountElement&&(logCountElement.textContent="0 条记录"),logCount=0,addLog("日志已清空","info")}function updateButtonState(isRunning=!1){const startButton=document.getElementById("start-register");if(!startButton)return;isRunning?(startButton.textContent="注册中...",startButton.style.background="linear-gradient(135deg, #FF9800 0%, #F57C00 100%)",startButton.disabled=!0,startButton.style.cursor="not-allowed"):(startButton.textContent="开始注册",startButton.style.background="linear-gradient(135deg, #4CAF50 0%, #45a049 100%)",startButton.disabled=!1,startButton.style.cursor="pointer")}function showToast(message,type="info"){addLog(message,type);const toast=document.createElement("div");if(toast.textContent=message,toast.style.cssText=`
            position: fixed;
            top: 20px;
            left: 50%;
            transform: translateX(-50%);
            background: ${type==="success"?"#4CAF50":type==="error"?"#f44336":type==="warning"?"#FF9800":"#2196F3"};
            color: white;
            padding: 12px 24px;
            border-radius: 6px;
            font-size: 14px;
            z-index: 10001;
            box-shadow: 0 4px 12px rgba(0,0,0,0.15);
            animation: slideIn 0.3s ease;
        `,!document.getElementById("qoder-toast-styles")){const style=document.createElement("style");style.id="qoder-toast-styles",style.textContent=`
                @keyframes slideIn {
                    from { transform: translateX(-50%) translateY(-100%); opacity: 0; }
                    to { transform: translateX(-50%) translateY(0); opacity: 1; }
                }
            `,document.head.appendChild(style)}document.body.appendChild(toast),setTimeout(()=>{toast.style.animation="slideIn 0.3s ease reverse",setTimeout(()=>{toast.parentNode&&toast.parentNode.removeChild(toast)},300)},3e3)}function simulateHumanVerification(){Logger.info("🤖 开始模拟人机验证");const errorMessage=document.querySelector(SELECTORS.errorAlert);if(errorMessage){const errorText=errorMessage.textContent.trim();if(Logger.error(`❌ 检测到错误: ${errorText}`),errorText.includes("Unable to verify the user is human")){Logger.warning("🤖 检测到人机验证失败，需要手动完成验证"),showToast("请手动完成人机验证后重试","warning"),updateButtonState(!1);return}}const captchaCheckbox=document.querySelector(SELECTORS.captchaCheckbox),checkedIcon=document.querySelector(SELECTORS.captchaCheckedIcon);if(!captchaCheckbox){Logger.error("❌ 未找到验证码复选框元素"),showToast("未找到验证码复选框元素","error"),updateButtonState(!1);return}if(!checkedIcon){Logger.error("❌ 未找到验证码图标元素"),showToast("未找到验证码图标元素","error"),updateButtonState(!1);return}Logger.success("✅ 找到验证码元素，开始验证"),showToast("开始模拟人机验证...","info");const checkboxBody=captchaCheckbox.closest(SELECTORS.captchaBody),checkboxText=document.querySelector(SELECTORS.captchaText),hasVerifiedClass=checkboxBody&&checkboxBody.classList.contains("verified"),hasVerifiedText=checkboxText&&checkboxText.textContent==="Verified";if(hasVerifiedClass&&hasVerifiedText){Logger.success("🎉 验证码已经通过验证"),Logger.debug(`  - verified类: ${hasVerifiedClass}`),Logger.debug(`  - verified文本: ${hasVerifiedText}`),showToast("验证码已经通过验证！","success"),updateButtonState(!1);return}simulateHumanMouseMovement(checkedIcon),setTimeout(()=>{simulateHumanClick(checkedIcon)},4e3+Math.random()*2e3);let verificationTimeout,checkInterval,retryCount=0;const maxRetries=CONFIG.captcha.maxRetries;function checkVerificationStatus(){const otpInputs=document.querySelectorAll(SELECTORS.otpInputs);if(otpInputs.length>0)return Logger.success("🎉 检测到已跳转到验证码页面！"),showToast("已跳转到验证码页面，开始处理验证码","success"),verificationTimeout&&clearTimeout(verificationTimeout),checkInterval&&clearInterval(checkInterval),observer.disconnect(),setTimeout(async()=>{Logger.info("📧 开始处理验证码页面");try{await handleOtpStageWithAutoFetch()}catch(error){Logger.error(`❌ 处理验证码页面时出错: ${error.message}`),showToast("处理验证码页面时出错，请手动输入验证码","error")}},1e3),!0;const checkboxBody=captchaCheckbox.closest(SELECTORS.captchaBody),checkboxText=document.querySelector(SELECTORS.captchaText),hasVerifiedClass=checkboxBody&&checkboxBody.classList.contains("verified"),hasVerifiedText=checkboxText&&checkboxText.textContent==="Verified";return!!(hasVerifiedClass&&hasVerifiedText)&&(Logger.success("🎉 验证成功！检测到验证状态"),Logger.debug(`  - verified类: ${hasVerifiedClass}`),Logger.debug(`  - verified文本: ${hasVerifiedText}`),showToast("人机验证成功！","success"),updateButtonState(!1),verificationTimeout&&clearTimeout(verificationTimeout),checkInterval&&clearInterval(checkInterval),observer.disconnect(),Logger.success("🎉 人机验证成功！立即启动邮箱监控..."),showToast("验证成功！正在启动验证码监控...","success"),setTimeout(async()=>{Logger.info("📧 开始监控邮箱获取验证码...");const emailSpan=document.querySelector(SELECTORS.verificationCode+" span");let registeredEmail=null;if(emailSpan){const emailText=emailSpan.textContent,emailMatch=emailText.match(/sent to ([^:]+):/);emailMatch&&(registeredEmail=emailMatch[1].trim(),Logger.info(`📧 从页面提取到注册邮箱: ${registeredEmail}`))}if(!registeredEmail&&window.lastGeneratedEmail&&(registeredEmail=window.lastGeneratedEmail,Logger.info(`📧 使用之前生成的注册邮箱: ${registeredEmail}`)),registeredEmail)try{const tempEmailConfig=configManager.getTempEmailConfig(),tempmail=tempEmailConfig.tempmail,epin=tempEmailConfig.epin;tempmail&&(tempEmailManager.currentEmail=tempmail,Logger.info(`📧 验证码监控使用临时邮箱: ${tempmail}`),epin&&Logger.info(`🔑 验证码监控使用epin: ${epin}`)),Logger.info("🧪 开始测试邮箱连接...");const connectionTest=await tempEmailManager.testEmailConnection();if(!connectionTest){Logger.error("❌ 邮箱连接测试失败，请检查配置"),showToast("邮箱连接失败，请检查配置","error");return}const emailStatus=await tempEmailManager.getEmailStatus();Logger.info(`📊 邮箱状态: ${emailStatus.connected?"已连接":"未连接"}, 邮件数量: ${emailStatus.mailCount}`),Logger.info("🔍 开始获取验证码...");const verificationCode=await tempEmailManager.getVerificationCode(6e4,registeredEmail);if(verificationCode){Logger.success(`✅ 获取到验证码: ${verificationCode}`),showToast(`获取到验证码: ${verificationCode}`,"success"),Logger.info("🔧 开始自动填充验证码...");const fillResult=await autoFillVerificationCode(verificationCode);fillResult?setTimeout(()=>{const continueBtn=document.querySelector(SELECTORS.continueBtn);continueBtn?(Logger.info("🔄 自动点击Continue按钮"),continueBtn.click(),showToast("验证码已自动提交，正在完成注册...","success")):(Logger.error("❌ 未找到Continue按钮"),showToast("请手动点击Continue按钮","warning"))},2e3):(Logger.error("❌ 验证码填充失败，请手动输入验证码"),showToast("验证码填充失败，请手动输入","error"))}else Logger.error("❌ 验证码获取失败或超时"),Logger.info("💡 建议检查："),Logger.info("   1. 邮箱配置是否正确"),Logger.info("   2. 是否已发送验证码邮件"),Logger.info("   3. 网络连接是否正常"),showToast("验证码获取失败，请手动输入","error")}catch(error){Logger.error(`❌ 验证码监控出错: ${error.message}`),showToast("验证码监控出错，请手动输入","error")}else Logger.error("❌ 无法获取注册邮箱，验证码监控无法启动"),showToast("无法获取注册邮箱，请手动输入验证码","error")},1e3),!0)}checkInterval=setInterval(()=>{if(checkVerificationStatus())return},500);const observer=new MutationObserver(mutations=>{mutations.forEach(mutation=>{if(checkVerificationStatus())return})});observer.observe(checkedIcon,{attributes:!0,attributeFilter:["style"],childList:!0,subtree:!0}),verificationTimeout=setTimeout(()=>{Logger.warning("⏰ 验证超时，检查验证状态");const otpInputs=document.querySelectorAll(SELECTORS.otpInputs);if(otpInputs.length>0){Logger.success("🎉 超时检测中发现已跳转到验证码页面！"),showToast("已跳转到验证码页面，开始处理验证码","success"),checkInterval&&clearInterval(checkInterval),observer.disconnect(),setTimeout(()=>{Logger.info("📧 开始处理验证码页面"),handleOtpStageWithAutoFetch()},1e3);return}if(checkVerificationStatus())return;retryCount<maxRetries?(retryCount++,Logger.warning(`⚠️ 验证可能失败，尝试重新点击... (第${retryCount}次重试)`),showToast(`验证可能失败，尝试重新点击... (第${retryCount}次重试)`,"warning"),setTimeout(()=>{Logger.info("🔄 开始重试验证"),checkInterval&&clearInterval(checkInterval),checkInterval=setInterval(()=>{if(checkVerificationStatus())return},500),verificationTimeout=setTimeout(()=>{Logger.warning("⏰ 重试验证超时，检查验证状态");const otpInputs=document.querySelectorAll(SELECTORS.otpInputs);if(otpInputs.length>0){Logger.success("🎉 重试超时检测中发现已跳转到验证码页面！"),showToast("已跳转到验证码页面，开始处理验证码","success"),checkInterval&&clearInterval(checkInterval),observer.disconnect(),setTimeout(async()=>{Logger.info("📧 开始处理验证码页面");try{await handleOtpStageWithAutoFetch()}catch(error){Logger.error(`❌ 处理验证码页面时出错: ${error.message}`),showToast("处理验证码页面时出错，请手动输入验证码","error")}},1e3);return}if(checkVerificationStatus())return;retryCount++,retryCount<maxRetries?(Logger.warning(`⚠️ 重试验证可能失败，尝试再次重试... (第${retryCount}次重试)`),showToast(`重试验证可能失败，尝试再次重试... (第${retryCount}次重试)`,"warning"),setTimeout(()=>{Logger.info("🔄 开始递归重试验证"),simulateHumanClick(checkedIcon)},2e3)):(Logger.error("❌ 验证失败，已达到最大重试次数"),showToast("验证失败，已达到最大重试次数","error"),updateButtonState(!1),checkInterval&&clearInterval(checkInterval),observer.disconnect())},8e3),simulateHumanClick(checkedIcon)},2e3)):(Logger.error("❌ 验证失败，已达到最大重试次数"),showToast("验证失败，已达到最大重试次数","error"),updateButtonState(!1),checkInterval&&clearInterval(checkInterval),observer.disconnect())},8e3)}function simulateHumanMouseMovement(targetElement){Logger.info("模拟鼠标移动...");try{const startX=Math.random()*window.innerWidth,startY=Math.random()*window.innerHeight,targetRect=targetElement.getBoundingClientRect(),targetX=targetRect.left+targetRect.width/2,targetY=targetRect.top+targetRect.height/2,controlPoints=generateBezierCurve(startX,startY,targetX,targetY),pathPoints=generatePathPoints(controlPoints,30);pathPoints.forEach((point,index)=>{setTimeout(()=>{try{const mouseEvent=new MouseEvent("mousemove",{clientX:point.x,clientY:point.y,bubbles:!0,cancelable:!0});document.dispatchEvent(mouseEvent)}catch(e){Logger.error("鼠标移动事件失败:",e)}},index*(CONFIG.captcha.mouseMoveDelay+Math.random()*10))})}catch(e){Logger.error("鼠标移动模拟失败:",e)}}function generateBezierCurve(startX,startY,endX,endY){const midX=(startX+endX)/2+(Math.random()-.5)*100,midY=(startY+endY)/2+(Math.random()-.5)*100;return[{x:startX,y:startY},{x:midX,y:midY},{x:endX,y:endY}]}function generatePathPoints(controlPoints,numPoints){const points=[];for(let i=0;i<=numPoints;i++){const t=i/numPoints,point=getBezierPoint(controlPoints,t);points.push(point)}return points}function getBezierPoint(controlPoints,t){const n=controlPoints.length-1;let x=0,y=0;for(let i=0;i<=n;i++){const coefficient=binomialCoefficient(n,i)*Math.pow(1-t,n-i)*Math.pow(t,i);x+=coefficient*controlPoints[i].x,y+=coefficient*controlPoints[i].y}return{x,y}}function binomialCoefficient(n,k){if(k===0||k===n)return 1;k>n-k&&(k=n-k);let result=1;for(let i=0;i<k;i++)result=result*(n-i)/(i+1);return result}function simulateHumanClick(targetElement){Logger.info("模拟点击行为...");try{setTimeout(()=>{try{const hoverEvent=new MouseEvent("mouseenter",{bubbles:!0,cancelable:!0});targetElement.dispatchEvent(hoverEvent),setTimeout(()=>{try{const mouseDownEvent=new MouseEvent("mousedown",{bubbles:!0,cancelable:!0,button:0,buttons:1});targetElement.dispatchEvent(mouseDownEvent),setTimeout(()=>{try{const mouseUpEvent=new MouseEvent("mouseup",{bubbles:!0,cancelable:!0,button:0,buttons:0});targetElement.dispatchEvent(mouseUpEvent),setTimeout(()=>{try{const clickEvent=new MouseEvent("click",{bubbles:!0,cancelable:!0,button:0,buttons:0});targetElement.dispatchEvent(clickEvent),Logger.info("点击模拟完成")}catch(e){Logger.error("点击事件失败:",e);try{targetElement.click(),Logger.info("备用点击方法成功")}catch(e2){Logger.error("备用点击方法也失败:",e2)}}},10+Math.random()*50)}catch(e){Logger.error("mouseup事件失败:",e)}},50+Math.random()*100)}catch(e){Logger.error("mousedown事件失败:",e)}},100+Math.random()*200)}catch(e){Logger.error("mouseenter事件失败:",e)}},500+Math.random()*1e3)}catch(e){Logger.error("模拟点击整体失败:",e);try{targetElement.click(),Logger.info("最终备用点击方法成功")}catch(e2){Logger.error("最终备用点击方法也失败:",e2)}}}async function handleOtpStageWithAutoFetch(){Logger.info("🤖 开始自动验证码获取流程"),handleOtpStage();const emailSpan=document.querySelector(SELECTORS.verificationCode+" span");let registeredEmail=null;if(emailSpan){const emailText=emailSpan.textContent,emailMatch=emailText.match(/sent to ([^:]+):/);emailMatch&&(registeredEmail=emailMatch[1].trim(),Logger.info(`📧 从页面提取到注册邮箱: ${registeredEmail}`))}if(!registeredEmail){Logger.error("❌ 无法从页面获取注册邮箱地址"),showToast("无法获取注册邮箱地址，请手动输入验证码","error");return}const tempEmailConfig=configManager.getTempEmailConfig(),tempmail=tempEmailConfig.tempmail,epin=tempEmailConfig.epin;if(!tempmail){Logger.error("❌ 未配置tempmail.plus服务"),showToast("未配置tempmail.plus服务，请手动输入验证码","error");return}tempEmailManager.currentEmail=tempmail,Logger.info(`📧 使用临时邮箱监控: ${tempmail}`),epin&&Logger.info(`🔑 使用epin: ${epin}`),Logger.info(`📧 注册邮箱: ${registeredEmail}`),Logger.info("📧 开始监控邮箱获取验证码...");try{const verificationCode=await tempEmailManager.getVerificationCode(3e4,registeredEmail);if(verificationCode){Logger.success(`✅ 自动获取到验证码: ${verificationCode}`),showToast(`自动获取验证码成功: ${verificationCode}`,"success");const fillResult=await autoFillVerificationCode(verificationCode);fillResult?setTimeout(()=>{const continueBtn=document.querySelector(SELECTORS.continueBtn);continueBtn?(Logger.info("🔄 自动点击Continue按钮"),continueBtn.click(),showToast("验证码已自动提交，正在完成注册...","success")):(Logger.error("❌ 未找到Continue按钮"),showToast("请手动点击Continue按钮","warning"))},2e3):(Logger.error("❌ 验证码填充失败，请手动输入验证码"),showToast("验证码填充失败，请手动输入","error"))}else Logger.error("❌ 自动获取验证码失败"),showToast("自动获取验证码失败，请手动输入","error")}catch(error){Logger.error(`❌ 自动验证码获取出错: ${error.message}`),showToast("自动验证码获取出错，请手动输入","error")}}async function autoFillVerificationCode(code){try{Logger.info(`🔧 开始自动填充验证码: ${code}`);const result=await OtpManager.fillCode(code);return result?(Logger.success("✅ 验证码自动填充成功"),showToast("验证码已自动填充","success")):(Logger.error("❌ 验证码自动填充失败"),showToast("验证码自动填充失败，请手动输入","error")),result}catch(error){return Logger.error(`❌ 验证码填充出错: ${error.message}`),showToast("验证码填充出错，请手动输入","error"),!1}}function handleOtpStage(){return Logger.info("🔧 开始优化验证码填充体验"),OtpManager.setupInputListeners()}const OtpManager={config:{errorText:"expired or incorrect",focusDelay:500,checkDelay:1e3,errorCheckDelay:2e3,inputDelay:100,pasteDelay:50},debugOtpInputs(){Logger.info("🔍 开始调试验证码输入框...");const container=document.querySelector(".verificationCode--o_u9MiU");if(container){Logger.info("✅ 找到验证码容器");const allInputs=container.querySelectorAll("input");Logger.info(`📝 容器内找到 ${allInputs.length} 个输入框`),allInputs.forEach((input,index)=>{Logger.info(`   输入框 ${index+1}: ${input.outerHTML.substring(0,100)}...`)})}else Logger.warning("❌ 未找到验证码容器");const otpSelectors=[".ant-otp-input",'input[aria-label^="OTP Input"]',".ant-otp .ant-input",'input[size="1"]'];otpSelectors.forEach(selector=>{const inputs=document.querySelectorAll(selector);Logger.info(`${selector}: 找到 ${inputs.length} 个输入框`)})},getOtpInputs(){this.debugOtpInputs();let inputs=document.querySelectorAll(SELECTORS.otpInputs);if(inputs.length===0){Logger.debug("🔍 主要选择器未找到输入框，尝试其他选择器");const selectors=['input[aria-label^="OTP Input"]',".ant-otp .ant-input",".verificationCode--o_u9MiU input",'input[size="1"]','input[type="text"]','input[type="number"]','input[autocomplete="one-time-code"]','input[placeholder*="code"]','input[placeholder*="验证"]','input[placeholder*="Code"]','input[placeholder*="OTP"]','input[placeholder*="PIN"]',".otp-input",".verification-input",".code-input"];for(const selector of selectors)if(inputs=document.querySelectorAll(selector),inputs.length>0){Logger.debug(`🔍 使用选择器 "${selector}" 找到 ${inputs.length} 个输入框`);break}}return inputs},getOtpContainer(){return document.querySelector(SELECTORS.verificationCode)},getErrorAlert(){return document.querySelector(SELECTORS.errorAlert)},clearInputs(){const inputs=this.getOtpInputs();inputs.forEach(input=>{input.value="",input.dispatchEvent(new Event("input",{bubbles:!0}))})},focusFirstInput(){const inputs=this.getOtpInputs();return!!inputs[0]&&(inputs[0].focus(),!0)},getCurrentCode(){const inputs=this.getOtpInputs();return Array.from(inputs).map(input=>input.value).join("")},isCodeComplete(){const inputs=this.getOtpInputs(),code=this.getCurrentCode();return code.length===inputs.length},hasError(){const errorAlert=this.getErrorAlert();return errorAlert&&errorAlert.textContent.includes(this.config.errorText)},handleError(){return!!this.hasError()&&(Logger.error("❌ 验证码错误或已过期"),showToast("验证码错误或已过期，请重新输入","error"),this.clearInputs(),setTimeout(()=>{this.focusFirstInput()&&Logger.info("🔄 已清空验证码输入框，请重新输入")},this.config.focusDelay),!0)},clickContinue(){const continueBtn=document.querySelector(SELECTORS.continueBtn);return continueBtn?(Logger.info("🔄 自动点击Continue按钮"),continueBtn.click(),!0):(Logger.error("❌ 未找到Continue按钮"),showToast("请手动点击Continue按钮","warning"),!1)},setupErrorListener(){const otpContainer=this.getOtpContainer();if(!otpContainer){Logger.warning("未找到验证码容器，无法设置错误监听器");return}const observer=new MutationObserver(mutations=>{mutations.forEach(mutation=>{mutation.type==="childList"&&mutation.addedNodes.forEach(node=>{if(node.nodeType===Node.ELEMENT_NODE){const errorAlert=node.querySelector(SELECTORS.errorAlert);errorAlert&&errorAlert.textContent.includes(this.config.errorText)&&(Logger.error("❌ 检测到验证码错误提示"),showToast("验证码错误或已过期，请重新输入","error"),this.handleError())}})})});return observer.observe(otpContainer,{childList:!0,subtree:!0}),Logger.info("👂 已设置验证码错误监听器"),observer},setupInputListeners(){const inputs=this.getOtpInputs();if(inputs.length===0){Logger.error("❌ 未找到验证码输入框");return}Logger.success(`✅ 找到 ${inputs.length} 个验证码输入框`),setTimeout(()=>{this.focusFirstInput(),Logger.success("🎯 自动聚焦到第一个验证码输入框")},this.config.focusDelay),inputs.forEach((input,index)=>{input.addEventListener("input",e=>{const value=e.target.value;if(!/^\d*$/.test(value)){e.target.value=value.replace(/\D/g,"");return}value.length>1&&(e.target.value=value.slice(0,1)),value.length===1&&index<inputs.length-1&&setTimeout(()=>{inputs[index+1].focus()},this.config.inputDelay),this.checkCompletion()}),input.addEventListener("keydown",e=>{e.key==="Backspace"&&e.target.value===""&&index>0&&setTimeout(()=>{inputs[index-1].focus()},this.config.inputDelay)}),input.addEventListener("paste",e=>{e.preventDefault();const pastedData=e.clipboardData.getData("text"),numbers=pastedData.replace(/\D/g,"").slice(0,inputs.length);if(numbers.length>0){numbers.split("").forEach((num,i)=>{inputs[i]&&(inputs[i].value=num,inputs[i].dispatchEvent(new Event("input",{bubbles:!0})))});const nextIndex=Math.min(numbers.length,inputs.length-1);inputs[nextIndex]&&inputs[nextIndex].focus()}})}),this.setupErrorListener()},checkCompletion(){if(this.isCodeComplete()){const code=this.getCurrentCode();Logger.success(`✅ 验证码填写完成: ${code}`),showToast("验证码填写完成！正在自动点击Continue...","success"),setTimeout(()=>{this.clickContinue()&&setTimeout(()=>{this.handleError()},this.config.errorCheckDelay)},this.config.checkDelay)}},async fillCode(code){try{Logger.info(`🔧 开始自动填充验证码: ${code}`);const inputs=this.getOtpInputs();if(inputs.length===0){Logger.error("❌ 未找到验证码输入框");const alternativeInputs=document.querySelectorAll('input[type="text"], input[type="number"], input[autocomplete="one-time-code"]');return alternativeInputs.length>0&&(Logger.info(`🔧 尝试使用替代输入框填充验证码`),await this.fillCodeToInputs(alternativeInputs,code))}return Logger.info(`🔧 找到 ${inputs.length} 个验证码输入框`),await this.fillCodeToInputs(inputs,code)}catch(error){return Logger.error(`❌ 验证码填充过程中出错: ${error.message}`),!1}},async fillCodeToInputs(inputs,code){try{if(Logger.info(`🔧 开始填充验证码到 ${inputs.length} 个输入框`),!inputs||inputs.length===0)return Logger.error("❌ 输入框列表为空"),!1;for(let i=0;i<inputs.length;i++)if(!document.contains(inputs[i]))return Logger.error(`❌ 输入框 ${i} 不在DOM中`),!1;this.clearInputs(),await new Promise(resolve=>setTimeout(resolve,200));const codeDigits=code.split("");for(let i=0;i<Math.min(codeDigits.length,inputs.length);i++){const input=inputs[i],digit=codeDigits[i];Logger.info(`📝 填充第 ${i+1} 位: ${digit}`),input.focus(),input.value=digit;try{const inputEvent=new Event("input",{bubbles:!0,cancelable:!0}),changeEvent=new Event("change",{bubbles:!0,cancelable:!0}),keydownEvent=new KeyboardEvent("keydown",{key:digit,code:`Digit${digit}`,bubbles:!0,cancelable:!0}),keyupEvent=new KeyboardEvent("keyup",{key:digit,code:`Digit${digit}`,bubbles:!0,cancelable:!0});input&&document.contains(input)&&(input.dispatchEvent(keydownEvent),input.dispatchEvent(inputEvent),input.dispatchEvent(keyupEvent),input.dispatchEvent(changeEvent))}catch(eventError){Logger.warning(`⚠️ 事件触发失败: ${eventError.message}`)}await new Promise(resolve=>setTimeout(resolve,this.config.inputDelay))}let currentCode=this.getCurrentCode();if(Logger.info(`📝 当前验证码: ${currentCode}`),currentCode!==code){Logger.warning(`⚠️ 方法1失败，尝试方法2: 直接设置值`);try{for(let i=0;i<Math.min(codeDigits.length,inputs.length);i++){const input=inputs[i],digit=codeDigits[i];input&&document.contains(input)&&(input.value=digit,input.dispatchEvent(new Event("input",{bubbles:!0})),input.dispatchEvent(new Event("change",{bubbles:!0})))}}catch(method2Error){Logger.warning(`⚠️ 方法2执行失败: ${method2Error.message}`)}currentCode=this.getCurrentCode(),Logger.info(`📝 方法2后验证码: ${currentCode}`)}if(currentCode!==code){Logger.warning(`⚠️ 方法2失败，尝试方法3: 使用paste事件`);try{if(inputs[0]&&document.contains(inputs[0])){inputs[0].focus();const pasteEvent=new ClipboardEvent("paste",{bubbles:!0,cancelable:!0,clipboardData:new DataTransfer});Object.defineProperty(pasteEvent.clipboardData,"getData",{value:()=>code}),inputs[0].dispatchEvent(pasteEvent)}}catch(method3Error){Logger.warning(`⚠️ 方法3执行失败: ${method3Error.message}`)}currentCode=this.getCurrentCode(),Logger.info(`📝 方法3后验证码: ${currentCode}`)}return currentCode===code?(Logger.success("✅ 验证码填充验证成功"),!0):(Logger.warning(`⚠️ 所有方法都失败，期望: ${code}，实际: ${currentCode}`),!1)}catch(error){return Logger.error(`❌ 验证码填充过程中出错: ${error.message}`),!1}}},RouteListener={currentUrl:window.location.href,checkInterval:null,observers:[],config:{checkInterval:3e3,pageLoadDelay:1e3},checkUrlChange(){window.location.href!==this.currentUrl&&(this.currentUrl=window.location.href,Logger.info("检测到页面路由变化:",this.currentUrl),setTimeout(()=>{PageManager.handleCurrentPage()},this.config.pageLoadDelay))},setupIntervalCheck(){this.checkInterval=setInterval(()=>{this.checkUrlChange()},this.config.checkInterval)},setupEventListeners(){const popstateHandler=()=>{setTimeout(()=>{PageManager.handleCurrentPage()},this.config.pageLoadDelay)};window.addEventListener("popstate",popstateHandler),this.observers.push({type:"popstate",handler:popstateHandler});const originalPushState=history.pushState,originalReplaceState=history.replaceState,routeHandler=()=>{setTimeout(()=>{PageManager.handleCurrentPage()},this.config.pageLoadDelay)};history.pushState=function(...args){originalPushState.apply(history,args),routeHandler()},history.replaceState=function(...args){originalReplaceState.apply(history,args),routeHandler()}},start(){this.setupIntervalCheck(),this.setupEventListeners(),Logger.info("🚀 路由监听器已启动")},stop(){this.checkInterval&&(clearInterval(this.checkInterval),this.checkInterval=null),this.observers.forEach(observer=>{observer.type==="popstate"&&window.removeEventListener("popstate",observer.handler)}),this.observers=[],Logger.info("🛑 路由监听器已停止")}},AppManager={isInitialized:!1,init(){if(this.isInitialized){Logger.warning("应用已经初始化，跳过重复初始化");return}if(document.getElementById("qoder-userscript-container")){Logger.warning("检测到已存在的容器，跳过初始化");return}PageManager.handleCurrentPage(),RouteListener.start(),this.isInitialized=!0,Logger.info("🚀 Qoder 注册助手已加载")},cleanup(){RouteListener.stop(),this.isInitialized=!1,Logger.info("🧹 应用资源已清理")}};function setupRouteChangeListener(){return RouteListener.start()}function init(){return AppManager.init()}document.readyState==="loading"?document.addEventListener("DOMContentLoaded",()=>{AppManager.init()}):AppManager.init();function createVerificationCodeButton(){if(document.getElementById("qoder-verification-btn"))return;const button=document.createElement("div");button.id="qoder-verification-btn",button.style.cssText=`
            position: fixed;
            top: 80px;
            right: 20px;
            z-index: ${CONFIG.ui.buttonZIndex};
            background: linear-gradient(135deg, #FF6B6B 0%, #FF5252 100%);
            color: white;
            border: none;
            border-radius: 8px;
            padding: 12px 20px;
            font-size: 14px;
            font-weight: 500;
            cursor: pointer;
            box-shadow: 0 4px 20px rgba(0,0,0,0.15);
            transition: all 0.3s ease;
            display: flex;
            align-items: center;
            gap: 8px;
        `,button.innerHTML="📧 获取验证码",button.addEventListener("mouseenter",()=>{button.style.transform="translateY(-2px)",button.style.boxShadow="0 6px 25px rgba(0,0,0,0.2)"}),button.addEventListener("mouseleave",()=>{button.style.transform="translateY(0)",button.style.boxShadow="0 4px 20px rgba(0,0,0,0.15)"}),button.addEventListener("click",async()=>{Logger.info("📧 用户点击获取验证码按钮"),button.disabled=!0,button.innerHTML="⏳ 获取中...",button.style.background="linear-gradient(135deg, #FF9800 0%, #F57C00 100%)",button.style.cursor="not-allowed";try{await handleOtpStageWithAutoFetch()}catch(error){Logger.error(`❌ 验证码获取失败: ${error.message}`),showToast("验证码获取失败，请重试","error")}finally{button.disabled=!1,button.innerHTML="📧 获取验证码",button.style.background="linear-gradient(135deg, #FF6B6B 0%, #FF5252 100%)",button.style.cursor="pointer"}}),document.body.appendChild(button),Logger.info("✅ 创建验证码获取按钮成功")}})()
